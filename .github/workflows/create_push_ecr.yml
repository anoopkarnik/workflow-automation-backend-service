on:
  push:
    branches: [ main ]
  workflow_dispatch:
    branches: [ main ]

name: Create and Push to ECR

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Check if ECR Repository exists
      id: check-ecr
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        repo_name=$ECR_REPOSITORY
        if aws ecr describe-repositories --repository-names $ECR_REPOSITORY; then
          echo "Repository exists"
          echo "::set-output name=repository_exists::true"  # Set an output variable
        else
          echo "Repository does not exist"
          echo "::set-output name=repository_exists::false"  # Set an output variable
        fi

    - name: Create ECR Repository if not present
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      if: steps.check-ecr.outputs.repository_exists == 'false'
      run: |
        aws ecr create-repository --repository-name $ECR_REPOSITORY

    - name: Echo Repository Status
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        if [ -z "ECR_REPOSITORY"]; then
          echo "ECR Repository already exists"
        else
          echo "ECR Repository created successfully"
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Docker image on EC2 an
        env:
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
          S3_KEY_FILE_NAME: ${{ vars.S3_KEY_FILE_NAME }}
          EC2_IPv4_DNS: ${{ vars.IPv4_DNS }}
        run: |
          aws s3 cp s3://$S3_BUCKET_NAME/$S3_KEY_FILE_NAME ~/.ssh/ssh_key.pem
          chmod 600 ~/.ssh/ssh_key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh_key.pem ubuntu@$EC2_IPv4_DNS '(aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}) && sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:latest'